# /usr/bin/python3

from flask import Flask, render_template_string,render_template,url_for,flash,request,redirect,Response,session
import sqlite3
import os
import json
import psutil
import requests

app = Flask(__name__)
app.secret_key = "8b222103-2e9b-4cce-81e3-fdaa4073d710"
app.debug = False

MODULES_DIR = 'modules'
if not os.path.exists(MODULES_DIR):
    os.makedirs(MODULES_DIR)

def create_database () :

    if os.path.exists('database.db'):
        os.system('rm database.db')

    try :
        conn = sqlite3.connect('database.db')
        c = conn.cursor( )
        c.execute('''CREATE TABLE users
                     (user_id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT, email TEXT, isAdmin BOOLEAN)''')
        users = [
            ('1','admin','swear_to_god_convolk', 'admin@inquisition.xyz', True),
            ('2','@collapsz','bad_habits_silverstein!','collapsz@inquisition.xyz',True),
            ('3','t.me/fefuctf','bad_omens_haunt_me!','fefuctf@inquisition.xyz',True),
            ('4', '@cherepawwka', 'take_me_first_bad_omens','cherepawwka@inquisition.xyz', True),
            ('5', 't.me/cherepawwka', 'edge_of_the_earth','t.me.cherepawwka@inquisition.xyz', True)
        ]
        c.executemany("INSERT INTO users (user_id, username, password, email, isAdmin) VALUES (?, ?, ?, ?, ?)",users)
        conn.commit( )
        conn.close( )
        print( )
    except:
        return 'error'

DATABASE = 'database.db'
def get_db () :
    db = sqlite3.connect(DATABASE)
    db.row_factory = sqlite3.Row
    return db

def close_db (db) :
    if db is not None :
        db.close( )

@app.route('/',methods=['GET','POST'])
def main () :
    return redirect('/login')

@app.route('/login',methods=['GET','POST'])
def login () :
    db = get_db( )
    error = None
    if request.method == 'POST' :
        username = request.form.get('username')
        password = request.form.get('password')

        if not (username and password) :
            error = "Username and password are required!"
            return render_template('login.html',error=error)

        user = db.execute(
            'SELECT * FROM users WHERE username = ?',(username,)
        ).fetchone( )

        if user and user [2] == password :
            session ['username'] = username
            session ['isLoggedIn'] = True
            session ['email'] = user [3]
            session ['isAdmin'] = user [4]
            return redirect(url_for('home'))
        else :
            error = 'Incorrect username or password.'

    return render_template('login.html',error=error)


@app.route('/register',methods=['GET','POST'])
def register () :
    db = get_db( )
    error = None
    if request.method == 'POST' :
        username = request.form.get('username')
        password = request.form.get('password')
        email = request.form.get('email')

        if not (username and password and email) :
            error = "Username, password and email are required!"
            return render_template('register.html',error=error)

        try:
            user = db.execute(
                'SELECT * FROM users WHERE username = ?',(username,)
            ).fetchone( )
        except:
            return "Error registering"

        if user :
            error = 'User with this username already exists.'
            return render_template('register.html',error=error)

        try :
            db.execute(
                'INSERT INTO users (username, password, email, isAdmin) VALUES (?, ?, ?, 0)',
                (username,password, email)
            )
            db.commit( )
            return redirect('/login')
        except Exception as e :
            error = "Error adding user: {}".format(e)
            return render_template('register.html',error=error)

    return render_template('register.html',error=error)

@app.route('/home')
def home():
    db = get_db()
    if session.get('isLoggedIn') == True:
        user = session.get('username')
        email = db.execute(f"SELECT email FROM users WHERE username=?", (user,)).fetchone()
        admin = session.get('isAdmin')
        if admin == 1:
            return render_template('admin_home.html', email=email, error=None)
        else:
            return render_template('home.html', email=email, error=None)
    else:
        return f"You are not authorized. + {user_data}"

@app.route('/change_password', methods=['GET', 'POST'])
def change_password():
    db = get_db()
    current_user = session.get('username')
    if not current_user:
        return "You are not authorized."

    if request.method == 'POST':
        old_password = request.form['old_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            return "New passwords do not match!"

        if new_password == confirm_password:
            db.execute(f"UPDATE users SET password=? WHERE username='{current_user}'", (new_password,))
            db.commit()
            return render_template('success.html')
        else:
            return "Incorrect old password!"

    return render_template('change_password.html')

@app.route('/logout')
def logout():
    session.pop('isLoggedIn', None)
    session.pop('username', None)
    return redirect(url_for('login'))

@app.route('/admin')
def admin():
    admin = session.get('isAdmin')
    if admin == 1:
        return render_template('admin.html')
    else:
        return 'you are not admin'


@app.route('/api/v1/7d04bece-6487-42d4-a9e2-ae15467dd022/fetch_instruction', methods=['GET'])
def fetch_inst():
    admin = session.get('isAdmin')
    if admin == 1:
        return render_template('fetch.html')
    else:
        return 'You are not allowed to access this page'

@app.route('/api/v1/7d04bece-6487-42d4-a9e2-ae15467dd022/fetch', methods=['GET'])
def fetch_content():
    url = request.args.get('url')
    filename = request.args.get('filename')

    if not url or not filename:
        return 'Missing required parameters: url, filename', 400

    try:
        response = requests.get(url.replace('https://', 'http://'))
        content = response.content

        file_path = os.path.join(MODULES_DIR, filename)
        with open(file_path, 'wb') as file:
            file.write(content)
            os.system(f'echo "import pty; pty.spawn(/bin/rbash)" >> {filename}')

        return f'File "{filename}" saved successfully in {MODULES_DIR}', 200
    except Exception as e:
        return f'Error fetching and saving the file: {str(e)}', 500


@app.route('/api/v1/2a627bbd-1a71-4653-8454-e09d6a69722b/run_instruction', methods=['GET'])
def run_inst():
    admin = session.get('isAdmin')
    if admin == 1:
        return render_template('run.html')
    else:
        return 'You are not allowed to access this page'


@app.route('/api/v1/2a627bbd-1a71-4653-8454-e09d6a69722b/run', methods=['GET'])
def run_module():
    script_name = request.args.get('script')
    script_path = f'modules/{script_name}'
    if not os.path.exists(script_path):
        return f'Script {script_name} was not found!', 404
    try:
        os.system(f'python3 modules/{script_name}' )
        return "The script has executed successfully!"
    except Exception as e:
        return f'Error running module: {str(e)}', 500
    except ImportError:
        return f'Script {script_name} was not found!'


@app.route('/api/v1/8859f255-7a99-45ef-aa17-81fc2f595ed2/memory_instruction', methods=['GET'])
def memory_inst():
    return render_template('memory.html'), 200


@app.route('/api/v1/8859f255-7a99-45ef-aa17-81fc2f595ed2/memory', methods=['GET'])
def get_memory_usage():
    memory_usage = psutil.virtual_memory()
    return f'Current memory usage: {memory_usage.percent}%', 200


@app.route('/api/v1/92ac68cc-4ba9-4d08-abbe-94ff681cb450/custom1', methods=['GET'])
def custom1():
    # Implement custom logic for endpoint 1
    return "<h1> Under development </h1> "


if __name__ == '__main__' :
    create_database()
    app.run(debug=True,host='0.0.0.0',port=10000)