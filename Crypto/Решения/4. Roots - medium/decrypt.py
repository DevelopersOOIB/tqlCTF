from Cryptodome.Util.number import long_to_bytes

sig = 20006730618717375606839513453517611545580682948201876053448260500986437102770975364968061656506332351765997333137066634435100239281599204453712047279460928310094936958937405812929965800225401005360782769067807325858353598053868582402509840297690216457315172977273090540986047708104581696718828431196335356302557617330862275200242090862227926879505825958711975387201837030154941339474233440197818617887635581136788144229803391860984329944202923008948424405647417771356980492527896708963344258192569589140554564035234704501171669229829740277045368089073816020602222694009072142432761321644472141438623894456360634164501
p = 27754121775618975505842693271747180802220591278275870653604147825536810576145921584823251503808118663743728477947528751912486589734951931460950226378827070621651069041518009705738341590493540793327128393482345913448171750522471876372452298147243206373604484469792247279667554999208540083455822123817652467948818490412757814030509132757813397320968977465947594860186619899700784766140418198467324876266148167436996571620663833451062168340773242908451700419904803386174091017976854327623721766866584582821658735871995178008687677597083490377270770040331019912012566400408762668968745769277665039091724562160083010036177

def Legendre(a, n):
    g = 1
    while True:
        if a == 0:
            return 0
        if a == 1:
            return 1
        k = 0
        a1 = a
        while a1 & 1 == 0:
            k += 1
            a1 >>= 1
        if k & 1 == 0:
            s = 1
        else:
            if n & 7 == 1 or n & 7 == 7:
                s = 1
            else:
                s = -1
        if a1 == 1:
            return g*s
        if n & 3 == 3 and a1 & 3 == 3:
            s = -s
        a, n, g = n % a1, a1, g*s

def sqrt(a, p):
    if Legendre(a, p) == -1:
        return 0
    elif p % 4 == 3:
        return pow(a, (p >> 2) + 1, p)
    elif p % 8 == 5:
        m = p >> 3
        if pow(a, 2*m + 1, p) == 1:
            return pow(a, m + 1, p)
        else:
            return (pow(a, m + 1, p) * pow(2, 2*m + 1, p)) % p
    else:
        N = 2
        while Legendre(N, p) != -1:
            N += 1
        h = p - 1
        k = 0
        while h & 1 == 0:
            k += 1
            h >>= 1
        a1 = pow(a, (h + 1) >> 1, p)
        a2 = pow(a, -1, p)
        N1 = pow(N, h, p)
        N2 = 1
        for i in range(k-1):
            b = (a1 * N2) % p
            c = (a2 * pow(b, 2, p)) % p
            d = pow(c, 1 << (k-2-i), p)
            if d == 1:
                j = 0
            else:
                j = 1
            N2 = (N2 * pow(N1, (1 << i) * j, p)) % p
        return (a1 * N2) % p
        
def main():
    d = 3
    p3 = p-1
    while p3 % d == 0:
        p3 //= d
    e = pow(d, -1, p3)
    flag1 = pow(sig, e, p)
    sqrt_3 = sqrt(-3, p)
    flag2 = (flag1 * (-1 + sqrt_3) * pow(2, -1, p)) % p
    flag3 = (flag1 * (-1 - sqrt_3) * pow(2, -1, p)) % p
    print(long_to_bytes(flag1))
    print(long_to_bytes(flag2))
    print(long_to_bytes(flag3))

if __name__ == "__main__":
    main()
